{"version":3,"file":"index.js","sources":["../../../cep.config.ts","../../../src/shared/shared.ts","../../../src/jsx/ppro/ppro-utils.ts","../../../src/jsx/ppro/ppro.ts","../../../src/jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\nimport { version } from \"./package.json\";\n\n\nconst config: CEP_Config = {\n  version,\n  id: \"com.dry-bones.cep\",\n  displayName: \"Dry Bones\",\n  symlink: \"local\",\n  port: 3000,\n  servePort: 5000,\n  startingDebugPort: 8860,\n  extensionManifestVersion: 6.0,\n  requiredRuntimeVersion: 9.0,\n  hosts: [\n    { name: \"PPRO\", version: \"[0.0,99.9]\" }\n  ],\n  type: \"Panel\",\n  iconDarkNormal: \"./src/assets/light-icon.png\",\n  iconNormal: \"./src/assets/dark-icon.png\",\n  iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\n  iconNormalRollOver: \"./src/assets/dark-icon.png\",\n  parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\n  width: 500,\n  height: 550,\n\n  panels: [\n    {\n      mainPath: \"./main/index.html\",\n      name: \"main\",\n      panelDisplayName: \"Dry Bones\",\n      autoVisible: true,\n      width: 600,\n      height: 650,\n    },\n\n  ],\n  build: {\n    jsxBin: \"off\",\n    sourceMap: true,\n  },\n  zxp: {\n    country: \"US\",\n    province: \"CA\",\n    org: \"MyCompany\",\n    password: \"mypassword\",\n    tsa: \"http://timestamp.digicert.com/\",\n    sourceMap: false,\n    jsxBin: \"off\",\n  },\n  installModules: [],\n  copyAssets: [],\n  copyZipAssets: [],\n};\nexport default config;\n","import config from \"../../cep.config\";\r\nexport const ns = config.id;\r\n","// ProjectItem Helpers\r\n\r\nexport const forEachChild = (\r\n  item: ProjectItem,\r\n  callback: (item: ProjectItem) => void\r\n) => {\r\n  const len = item.children.numItems;\r\n  for (let i = 0; i < len; i++) {\r\n    callback(item.children[i]);\r\n  }\r\n};\r\n\r\nexport const deleteItem = (item: ProjectItem) => {\r\n  if (item.type === 2 /* BIN */) {\r\n    item.deleteBin();\r\n  } else {\r\n    const tmpBin = app.project.rootItem.createBin(\"tmp\");\r\n    item.moveBin(tmpBin);\r\n    tmpBin.deleteBin();\r\n  }\r\n};\r\n\r\nexport const getChildByName = (item: ProjectItem, name: string) => {\r\n  for (let i = 0; i < item.children.numItems; i++) {\r\n    const child = item.children[i];\r\n    if (child.name === name) {\r\n      return child;\r\n    }\r\n  }\r\n};\r\n\r\nexport const getParentItem = (item: ProjectItem) => {\r\n  const dir = item.treePath.split(\"\\\\\");\r\n  if (dir.length < 2) {\r\n    return app.project.rootItem;\r\n  }\r\n  let current = app.project.rootItem;\r\n  for (let i = 2; i < dir.length - 1; i++) {\r\n    const name = dir[i];\r\n    const next = getChildByName(current, name);\r\n    if (next) {\r\n      current = next;\r\n    }\r\n  }\r\n  return current;\r\n};\r\n\r\nexport const findItemByPath = (\r\n  item: ProjectItem,\r\n  path: string\r\n): ProjectItem | undefined => {\r\n  const len = item.children.numItems;\r\n  for (let i = 0; i < len; i++) {\r\n    const child = item.children[i];\r\n    if (child.children && child.children.numItems > 0) {\r\n      const res = findItemByPath(child, path);\r\n      if (res) {\r\n        return res;\r\n      }\r\n    } else if (child.getMediaPath() === path) {\r\n      return child;\r\n    }\r\n  }\r\n};\r\n\r\n// Sequence Helpers\r\n\r\nexport const getSequenceLengthInFrames = (seq: Sequence) => {\r\n  const settings = seq.getSettings();\r\n  const end = seq.end;\r\n  const fps = settings.videoFrameRate.ticks;\r\n  const frames = parseInt(end) / parseInt(fps);\r\n  return frames;\r\n};\r\n\r\nexport const forEachVideoTrack = (\r\n  sequence: Sequence,\r\n  callback: (track: Track, index: number) => void,\r\n  reverse?: boolean\r\n) => {\r\n  const num = sequence.videoTracks.numTracks;\r\n  if (reverse) {\r\n    for (let i = num - 1; i > -1; i--) {\r\n      callback(sequence.videoTracks[i], i);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < num; i++) {\r\n      callback(sequence.videoTracks[i], i);\r\n    }\r\n  }\r\n};\r\n\r\nexport const forEachAudioTrack = (\r\n  sequence: Sequence,\r\n  callback: (track: Track, index: number) => void,\r\n  reverse?: boolean\r\n) => {\r\n  const num = sequence.audioTracks.numTracks;\r\n  if (reverse) {\r\n    for (let i = num - 1; i > -1; i--) {\r\n      callback(sequence.audioTracks[i], i);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < num; i++) {\r\n      callback(sequence.audioTracks[i], i);\r\n    }\r\n  }\r\n};\r\n\r\nexport const forEachClip = (\r\n  track: Track,\r\n  callback: (clip: TrackItem, index: number) => void,\r\n  reverse?: boolean\r\n) => {\r\n  const num = track.clips.numItems;\r\n  if (reverse) {\r\n    for (let i = num - 1; i > -1; i--) {\r\n      callback(track.clips[i], i);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < num; i++) {\r\n      callback(track.clips[i], i);\r\n    }\r\n  }\r\n};\r\n\r\n// Time Helpers\r\n\r\nexport const addTime = (a: Time, b: Time) => {\r\n  const ticks = parseInt(a.ticks) + parseInt(b.ticks);\r\n  let time = new Time();\r\n  time.ticks = ticks.toString();\r\n  return time;\r\n};\r\n\r\nexport const subtractTime = (a: Time, b: Time) => {\r\n  const ticks = parseInt(a.ticks) - parseInt(b.ticks);\r\n  let time = new Time();\r\n  time.ticks = ticks.toString();\r\n  return time;\r\n};\r\nexport const multiplyTime = (a: Time, factor: number) => {\r\n  const ticks = parseInt(a.ticks) * factor;\r\n  let time = new Time();\r\n  time.ticks = ticks.toString();\r\n  return time;\r\n};\r\nexport const divideTime = (a: Time, factor: number) => {\r\n  const ticks = parseInt(a.ticks) / factor;\r\n  let time = new Time();\r\n  time.ticks = ticks.toString();\r\n  return time;\r\n};\r\n\r\n// QE DOM Methods\r\n\r\nexport const qeGetClipAt = (track: Track, index: number) => {\r\n  let curClipIndex = -1;\r\n  for (let i = 0; i < track.numItems; i++) {\r\n    const item = track.getItemAt(i);\r\n    //@ts-ignore\r\n    const type = item.type as \"Empty\" | \"Clip\";\r\n    if (type === \"Clip\") {\r\n      curClipIndex++;\r\n      if (curClipIndex === index) {\r\n        return item;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Metadata Helpers\r\n\r\nexport const getPrMetadata = (projectItem: ProjectItem, fields: string[]) => {\r\n  let PProMetaURI = \"http://ns.adobe.com/premierePrivateProjectMetaData/1.0/\";\r\n  if (ExternalObject.AdobeXMPScript === undefined) {\r\n    ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\r\n  }\r\n  if (!app.isDocumentOpen() || !ExternalObject.AdobeXMPScript || !XMPMeta) {\r\n    return {};\r\n  }\r\n  let xmp = new XMPMeta(projectItem.getProjectMetadata());\r\n  let result: {\r\n    [key: string]: string;\r\n  } = {};\r\n  for (let i = 0; i < fields.length; i++) {\r\n    if (xmp.doesPropertyExist(PProMetaURI, fields[i])) {\r\n      result[fields[i]] = xmp.getProperty(PProMetaURI, fields[i]).value;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n// Motion Graphics Template ( MOGRT ) Helpers\r\n\r\nexport const fillMogrtText = (\r\n  clip: TrackItem,\r\n  propName: string,\r\n  text: string\r\n) => {\r\n  const mgt = clip.getMGTComponent();\r\n  const prop = mgt.properties.getParamForDisplayName(propName);\r\n  if (prop) {\r\n    const valueStr = prop.getValue();\r\n    let value = JSON.parse(valueStr) as any;\r\n    value.textEditValue = text;\r\n    prop.setValue(JSON.stringify(value), true);\r\n  }\r\n};\r\n\r\n// Audio Conversions\r\n\r\nexport const dbToDec = (x: number) => Math.pow(10, (x - 15) / 20);\r\n\r\nexport const decToDb = (x: number) => 20 * Math.log(x) * Math.LOG10E + 15;\r\n","import { getChildByName } from './ppro-utils';\r\n\r\nconst myRoot = app.project.rootItem;\r\n\r\nconst binsExist = () => {\r\n    if (getChildByName(myRoot, \"01 Cuts\")\r\n        && getChildByName(myRoot, \"02 Footage\")\r\n        && getChildByName(myRoot, \"03 Audio\")\r\n        && getChildByName(myRoot, \"04 Graphics\")\r\n        && getChildByName(myRoot, \"05 2D\")\r\n        && getChildByName(myRoot, \"06 3D\")\r\n        && getChildByName(myRoot, \"07 Color\")\r\n        && getChildByName(myRoot, \"08 Output\")) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const createFolderStructure = () => {\r\n\r\n    // Prevent duplicate folders\r\n    if (binsExist()) {\r\n        alert(\"Project structure already exists.\");\r\n        return;\r\n    }\r\n\r\n    // 01 Cuts\r\n    const f01 = myRoot.createBin(\"01 Cuts\");\r\n    f01.createBin(\"00 Nests\");\r\n    f01.createBin(\"01 Raw\");\r\n    f01.createBin(\"02 Rough\");\r\n    f01.createBin(\"03 Conform\");\r\n    f01.createBin(\"04 Master\");\r\n\r\n    // 02 Footage\r\n    const f02 = myRoot.createBin(\"02 Footage\");\r\n    f02.createBin(\"01 Raw\");\r\n    f02.createBin(\"04 Reference\");\r\n    f02.createBin(\"05 Exports\");\r\n\r\n    // 03 Audio\r\n    const f03 = myRoot.createBin(\"03 Audio\");\r\n    f03.createBin(\"01 Location\");\r\n    f03.createBin(\"02 VO\");\r\n    getChildByName(f03, \"02 VO\")?.createBin(\"01 Temp\");\r\n    getChildByName(f03, \"02 VO\")?.createBin(\"02 Final\");\r\n    f03.createBin(\"03 Music\");\r\n    getChildByName(f03, \"03 Music\")?.createBin(\"01 Temp\");\r\n    getChildByName(f03, \"03 Music\")?.createBin(\"02 Final\");\r\n    f03.createBin(\"04 SFX\");\r\n    f03.createBin(\"05 Mixes\");\r\n    getChildByName(f03, \"05 Mixes\")?.createBin(\"01 Temp\");\r\n    getChildByName(f03, \"05 Mixes\")?.createBin(\"02 Final\");\r\n\r\n    // 04 Graphics\r\n    const f04 = myRoot.createBin(\"04 Graphics\");\r\n    f04.createBin(\"01 Vector\");\r\n    f04.createBin(\"02 Raster\");\r\n    f04.createBin(\"03 Exports\");\r\n\r\n    // 05 2D\r\n    const f05 = myRoot.createBin(\"05 2D\");\r\n    f05.createBin(\"03 Exports\");\r\n    \r\n    // 06 3D\r\n    const f06 = myRoot.createBin(\"06 3D\");\r\n    f06.createBin(\"03 Renders\");\r\n\r\n    // 07 Color\r\n    const f07 = myRoot.createBin(\"07 Color\");\r\n    f07.createBin(\"04 Exports\");\r\n\r\n    // 08 Output\r\n    const f08 = myRoot.createBin(\"08 Output\");\r\n    f08.createBin(\"01 Rough\");\r\n    f08.createBin(\"02 Final\");\r\n};\r\n\r\nexport const alertUser = (message: string) => {\r\n    alert(message);\r\n};\r\n\r\n\r\n// Make a folder within the item, return the folder's ID\r\nexport const getFolder = () => {\r\n    // return myRoot.children[0];\r\n    return myRoot;\r\n};\r\n\r\n// Make a folder within the item, return the folder's ID\r\nexport const createFolder = (item: ProjectItem, name: string) => {\r\n    const result = item.createBin(name);\r\n    return result;\r\n};\r\n\r\nexport const getItemById = (item: ProjectItem, id: string) => {\r\n    for (let i = 0; i < item.children.numItems; i++) {\r\n        const child = item.children[i];\r\n        alert(String(child.type));\r\n    }\r\n};\r\n\r\nexport const getRootItem = () => {\r\n    return myRoot;\r\n}","// @include './lib/json2.js'\n\nimport { ns } from \"../shared/shared\";\n\nimport * as ppro from \"./ppro/ppro\";\n\nlet main: any;\n\nswitch (BridgeTalk.appName) {\n  case \"premierepro\":\n  case \"premiereprobeta\":\n    main = ppro;\n    break;\n}\n//@ts-ignore\nconst host = typeof $ !== \"undefined\" ? $ : window;\nhost[ns] = main;\n\nexport type Scripts = typeof ppro\n"],"names":["version","id","displayName","symlink","port","servePort","startingDebugPort","extensionManifestVersion","requiredRuntimeVersion","hosts","name","type","iconDarkNormal","iconNormal","iconDarkNormalRollOver","iconNormalRollOver","parameters","width","height","panels","mainPath","panelDisplayName","autoVisible","build","jsxBin","sourceMap","zxp","country","province","org","password","tsa","installModules","copyAssets","copyZipAssets","f01","f02","f03","f04","f05","f06","f07","f08","alert","main","host"],"mappings":";;AAIA;AACEA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACIC;AAAcV;AAAsB;AAExCW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEAC;AAEIC;AACAV;AACAW;AACAC;AACAL;AACAC;AACF;AAGFK;AACEC;AACAC;;AAEFC;AACEC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAD;;AAEFQ;AACAC;AACAC;AACF;;ACpDA;;ACDA;AAsBA;AACE;AACE;AACA;AACE;AACF;AACF;AACF;;AC3BA;AAEA;;AASQ;AACJ;AACI;AACJ;AACJ;AAEA;;AAEI;;;AAGI;AACJ;;AAEA;AACA;AACAC;AACAA;AACAA;AACAA;AACAA;;AAEA;AACA;AACAC;AACAA;AACAA;;AAEA;AACA;AACAC;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACAA;AACA;AACA;;AAEA;AACA;AACAC;AACAA;AACAA;;AAEA;AACA;AACAC;;AAEA;AACA;AACAC;;AAEA;AACA;AACAC;;AAEA;AACA;AACAC;AACAA;AACJ;AAEA;;AAEA;;AAGA;AACA;AACI;AACA;AACJ;;AAEA;AACA;AACI;AACA;AACJ;AAEA;AACI;AACI;AACAC;AACJ;AACJ;AAEA;AACI;AACJ;;;;;;;;;;;;ACnGA;AAEA;AACE;AACA;AACEC;AACA;AACJ;AACA;AACA;AACAC"}
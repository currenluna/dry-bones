{"version":3,"file":"index.js","sources":["../../../cep.config.ts","../../../src/shared/shared.ts","../../../src/jsx/ppro/ppro.ts","../../../src/jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\nimport { version } from \"./package.json\";\n\n\nconst config: CEP_Config = {\n  version,\n  id: \"com.dry-bones.cep\",\n  displayName: \"Dry Bones\",\n  symlink: \"local\",\n  port: 3000,\n  servePort: 5000,\n  startingDebugPort: 8860,\n  extensionManifestVersion: 6.0,\n  requiredRuntimeVersion: 9.0,\n  hosts: [\n    { name: \"PPRO\", version: \"[0.0,99.9]\" }\n  ],\n  type: \"Panel\",\n  iconDarkNormal: \"./src/assets/light-icon.png\",\n  iconNormal: \"./src/assets/dark-icon.png\",\n  iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\n  iconNormalRollOver: \"./src/assets/dark-icon.png\",\n  parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\n  width: 500,\n  height: 550,\n\n  panels: [\n    {\n      mainPath: \"./main/index.html\",\n      name: \"main\",\n      panelDisplayName: \"Dry Bones\",\n      autoVisible: true,\n      width: 600,\n      height: 650,\n    },\n\n  ],\n  build: {\n    jsxBin: \"off\",\n    sourceMap: true,\n  },\n  zxp: {\n    country: \"US\",\n    province: \"CA\",\n    org: \"MyCompany\",\n    password: \"mypassword\",\n    tsa: \"http://timestamp.digicert.com/\",\n    sourceMap: false,\n    jsxBin: \"off\",\n  },\n  installModules: [],\n  copyAssets: [],\n  copyZipAssets: [],\n};\nexport default config;\n","import config from \"../../cep.config\";\nexport const ns = config.id;\n\nexport type Folder = {\n    name: string;\n    type: string;\n    id: number;\n}","import { isUndefined } from \"util\";\nimport type { Folder } from \"../../shared/shared\"\n\nconst myRoot = app.project.rootItem;\n\nlet items: ProjectItem[] = [];\n\nexport const alertUser = (message: string) => alert(message);\n\n// Make a folder within the item, return the folder object\nexport const createBin = (name: string) => {\n    const bin = myRoot.createBin(name);\n    return bin;\n};\n\n// // Search for a folder in Root, provided an id\n// export const getFolderById = (id: string) => {\n//     for (let i = 0; i < myRoot.children.numItems; i++) {\n//         const child = myRoot.children[i];\n//         if (child.nodeId === id) {\n//             return child;\n//         } else if (child.type === 2) { // BIN === 2\n//             searchFolder(child, id);\n//         }\n//     }\n// };\n\n// 000f4240 - Root\n// 000f424f - Sequence 01\n// 000f4250 - Top\n// 000f4251 - Other\n// 000f4252 - Mid\n// 000f4253 - Low\n\nexport const testFunc = () => {\n    // alert(printChildren(myRoot));\n    // traverseItem(myRoot);\n\n    const id = \"000f4251\";\n    const item = findItemById(myRoot, id);\n    if (item !== undefined) {\n        alert(\"Found \" + item.name + \"!\");\n    } else {\n        alert(\"Item with id \" + id + \" does not exist\");\n    }\n};\n\n// --- Test Structure ---\n// Untitled.prproj (000f4240)\n// |- Sequence 01 (000f424f)\n// ||- Top (000f4250)\n// ||-- Mid (000f4252)\n// ||--- Low (000f4253)\n// |- Other (000f4251)\n\n// Recursively search a given item, provided a nodeId\nexport const findItemById = (item: ProjectItem, id: string): ProjectItem | undefined => {\n    alert(\"entered function w/ \" + item.name + \"\\nid is \" + item.nodeId);\n    if (item === undefined) {\n        alert(\"case 1: returning undefined\");\n        return undefined;\n    }\n    if (item.nodeId === id) {\n        alert(\"case 2: returning item\");\n        return item;\n    }\n    if (item.type === 2 || item.type === 3) { // only Search BINs and ROOT\n        alert(\"case 3: entering for loop on \" + item.name + \"'s children\");\n        for (let i = 0; i < item.children.numItems; i++) {\n            const child = item.children[i];\n            const result = findItemById(child, id);\n            if (result !== undefined) {\n                return result;\n            }\n        }\n    }\n    alert(\"case 4: returning undefined\");\n    return undefined;\n};\n\n// findItemById(myRoot, 000f4251)\n// \n\n\n\n\n// traverseItem(myRoot)\n//      alert(myRoot.Name)\n//          traverseItem(Sequence 01)\n\nexport const printChildren = (item: ProjectItem) => {\n    let result = \"\";\n    for (let i = 0; i < item.children.numItems; i++) {\n        const child = item.children[i];\n        result += (child.name + \": \" + child.nodeId);\n        if (i !== (item.children.numItems - 1)) {\n            result += \", \";\n        }\n    }\n    return result;\n}\n\n// Recursively traverse all bins\nexport const traverseItem = (item: ProjectItem) => {\n    alert(item.name);\n    for (let i = 0; i < item.children.numItems; i++) {\n        const child = item.children[i];\n        if (child.type === 2) { // Only traverse BIN type\n            traverseItem(child);\n        } else {\n            // alert(child.name + \" is not a bin\");\n        }\n    }\n}\n\n\n\n\n\nexport const getRootItem = () => {\n    return myRoot;\n};\n\n// // Iterate over every Project Item recursively\n// let names: string[] = [];\n// export const getItemInfo = (item: ProjectItem) => {\n//     for (let i = 0; i < item.children.numItems; i++) {\n//         const child = item.children[i];\n//         getItemInfo(child);\n//         names.push(child.name);\n//     }\n// };\n\n// // Start iterating via Root Item and return array to JS side\n// export const getAllItemInfo = () => {\n//     names = [];\n//     getItemInfo(myRoot);\n//     return names;\n// }","// @include './lib/json2.js'\n\nimport { ns } from \"../shared/shared\";\n\nimport * as ppro from \"./ppro/ppro\";\n\nlet main: any;\n\nswitch (BridgeTalk.appName) {\n  case \"premierepro\":\n  case \"premiereprobeta\":\n    main = ppro;\n    break;\n}\n//@ts-ignore\nconst host = typeof $ !== \"undefined\" ? $ : window;\nhost[ns] = main;\n\nexport type Scripts = typeof ppro\n"],"names":["version","id","displayName","symlink","port","servePort","startingDebugPort","extensionManifestVersion","requiredRuntimeVersion","hosts","name","type","iconDarkNormal","iconNormal","iconDarkNormalRollOver","iconNormalRollOver","parameters","width","height","panels","mainPath","panelDisplayName","autoVisible","build","jsxBin","sourceMap","zxp","country","province","org","password","tsa","installModules","copyAssets","copyZipAssets","alert","result","main","host"],"mappings":";;AAIA;AACEA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACIC;AAAcV;AAAsB;AAExCW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEAC;AAEIC;AACAV;AACAW;AACAC;AACAL;AACAC;AACF;AAGFK;AACEC;AACAC;;AAEFC;AACEC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAD;;AAEFQ;AACAC;AACAC;AACF;;ACpDA;;ACEA;AAIA;;AAA4D;;AAE5D;AACA;AACI;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACI;AACA;;;AAGA;;;AAGA;AACIC;AACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACIA;;;AAGI;AACJ;AACA;;AAEI;AACJ;;AAC0C;;AAEtC;AACI;AACA;;AAEI;AACJ;AACJ;AACJ;;AAEA;AACJ;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;;AAEI;AACI;;;AAGIC;AACJ;AACJ;AACA;AACJ;;AAEA;AACA;AACID;AACA;AACI;AACA;AAAwB;;AAExB;AAGJ;AACJ;AAMA;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpIA;AAEA;AACE;AACA;AACEE;AACA;AACJ;AACA;AACA;AACAC"}